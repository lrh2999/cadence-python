# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from temporal.proto.workflowservice import request_response_pb2 as temporal_dot_proto_dot_workflowservice_dot_request__response__pb2


class WorkflowServiceStub(object):
    """WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
    StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
    to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService.  For each
    DecisionTask, application is expected to process the history of events for that session and respond back with next
    decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
    with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterNamespace = channel.unary_unary(
                '/workflowservice.WorkflowService/RegisterNamespace',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RegisterNamespaceRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RegisterNamespaceResponse.FromString,
                )
        self.DescribeNamespace = channel.unary_unary(
                '/workflowservice.WorkflowService/DescribeNamespace',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeNamespaceRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeNamespaceResponse.FromString,
                )
        self.ListNamespaces = channel.unary_unary(
                '/workflowservice.WorkflowService/ListNamespaces',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListNamespacesRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListNamespacesResponse.FromString,
                )
        self.UpdateNamespace = channel.unary_unary(
                '/workflowservice.WorkflowService/UpdateNamespace',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.UpdateNamespaceRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.UpdateNamespaceResponse.FromString,
                )
        self.DeprecateNamespace = channel.unary_unary(
                '/workflowservice.WorkflowService/DeprecateNamespace',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DeprecateNamespaceRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DeprecateNamespaceResponse.FromString,
                )
        self.StartWorkflowExecution = channel.unary_unary(
                '/workflowservice.WorkflowService/StartWorkflowExecution',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.StartWorkflowExecutionRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.StartWorkflowExecutionResponse.FromString,
                )
        self.GetWorkflowExecutionHistory = channel.unary_unary(
                '/workflowservice.WorkflowService/GetWorkflowExecutionHistory',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetWorkflowExecutionHistoryRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetWorkflowExecutionHistoryResponse.FromString,
                )
        self.PollForDecisionTask = channel.unary_unary(
                '/workflowservice.WorkflowService/PollForDecisionTask',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForDecisionTaskRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForDecisionTaskResponse.FromString,
                )
        self.RespondDecisionTaskCompleted = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondDecisionTaskCompleted',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskCompletedRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskCompletedResponse.FromString,
                )
        self.RespondDecisionTaskFailed = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondDecisionTaskFailed',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskFailedRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskFailedResponse.FromString,
                )
        self.PollForActivityTask = channel.unary_unary(
                '/workflowservice.WorkflowService/PollForActivityTask',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForActivityTaskRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForActivityTaskResponse.FromString,
                )
        self.RecordActivityTaskHeartbeat = channel.unary_unary(
                '/workflowservice.WorkflowService/RecordActivityTaskHeartbeat',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatResponse.FromString,
                )
        self.RecordActivityTaskHeartbeatById = channel.unary_unary(
                '/workflowservice.WorkflowService/RecordActivityTaskHeartbeatById',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatByIdRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatByIdResponse.FromString,
                )
        self.RespondActivityTaskCompleted = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondActivityTaskCompleted',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedResponse.FromString,
                )
        self.RespondActivityTaskCompletedById = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondActivityTaskCompletedById',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedByIdRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedByIdResponse.FromString,
                )
        self.RespondActivityTaskFailed = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondActivityTaskFailed',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedResponse.FromString,
                )
        self.RespondActivityTaskFailedById = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondActivityTaskFailedById',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedByIdRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedByIdResponse.FromString,
                )
        self.RespondActivityTaskCanceled = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondActivityTaskCanceled',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledResponse.FromString,
                )
        self.RespondActivityTaskCanceledById = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondActivityTaskCanceledById',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledByIdRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledByIdResponse.FromString,
                )
        self.RequestCancelWorkflowExecution = channel.unary_unary(
                '/workflowservice.WorkflowService/RequestCancelWorkflowExecution',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RequestCancelWorkflowExecutionRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RequestCancelWorkflowExecutionResponse.FromString,
                )
        self.SignalWorkflowExecution = channel.unary_unary(
                '/workflowservice.WorkflowService/SignalWorkflowExecution',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWorkflowExecutionRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWorkflowExecutionResponse.FromString,
                )
        self.SignalWithStartWorkflowExecution = channel.unary_unary(
                '/workflowservice.WorkflowService/SignalWithStartWorkflowExecution',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWithStartWorkflowExecutionRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWithStartWorkflowExecutionResponse.FromString,
                )
        self.ResetWorkflowExecution = channel.unary_unary(
                '/workflowservice.WorkflowService/ResetWorkflowExecution',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetWorkflowExecutionRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetWorkflowExecutionResponse.FromString,
                )
        self.TerminateWorkflowExecution = channel.unary_unary(
                '/workflowservice.WorkflowService/TerminateWorkflowExecution',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.TerminateWorkflowExecutionRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.TerminateWorkflowExecutionResponse.FromString,
                )
        self.ListOpenWorkflowExecutions = channel.unary_unary(
                '/workflowservice.WorkflowService/ListOpenWorkflowExecutions',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListOpenWorkflowExecutionsRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListOpenWorkflowExecutionsResponse.FromString,
                )
        self.ListClosedWorkflowExecutions = channel.unary_unary(
                '/workflowservice.WorkflowService/ListClosedWorkflowExecutions',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListClosedWorkflowExecutionsRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListClosedWorkflowExecutionsResponse.FromString,
                )
        self.ListWorkflowExecutions = channel.unary_unary(
                '/workflowservice.WorkflowService/ListWorkflowExecutions',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListWorkflowExecutionsRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListWorkflowExecutionsResponse.FromString,
                )
        self.ListArchivedWorkflowExecutions = channel.unary_unary(
                '/workflowservice.WorkflowService/ListArchivedWorkflowExecutions',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListArchivedWorkflowExecutionsRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListArchivedWorkflowExecutionsResponse.FromString,
                )
        self.ScanWorkflowExecutions = channel.unary_unary(
                '/workflowservice.WorkflowService/ScanWorkflowExecutions',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ScanWorkflowExecutionsRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ScanWorkflowExecutionsResponse.FromString,
                )
        self.CountWorkflowExecutions = channel.unary_unary(
                '/workflowservice.WorkflowService/CountWorkflowExecutions',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.CountWorkflowExecutionsRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.CountWorkflowExecutionsResponse.FromString,
                )
        self.GetSearchAttributes = channel.unary_unary(
                '/workflowservice.WorkflowService/GetSearchAttributes',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetSearchAttributesRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetSearchAttributesResponse.FromString,
                )
        self.RespondQueryTaskCompleted = channel.unary_unary(
                '/workflowservice.WorkflowService/RespondQueryTaskCompleted',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondQueryTaskCompletedRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondQueryTaskCompletedResponse.FromString,
                )
        self.ResetStickyTaskList = channel.unary_unary(
                '/workflowservice.WorkflowService/ResetStickyTaskList',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetStickyTaskListRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetStickyTaskListResponse.FromString,
                )
        self.QueryWorkflow = channel.unary_unary(
                '/workflowservice.WorkflowService/QueryWorkflow',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.QueryWorkflowRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.QueryWorkflowResponse.FromString,
                )
        self.DescribeWorkflowExecution = channel.unary_unary(
                '/workflowservice.WorkflowService/DescribeWorkflowExecution',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeWorkflowExecutionRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeWorkflowExecutionResponse.FromString,
                )
        self.DescribeTaskList = channel.unary_unary(
                '/workflowservice.WorkflowService/DescribeTaskList',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeTaskListRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeTaskListResponse.FromString,
                )
        self.GetClusterInfo = channel.unary_unary(
                '/workflowservice.WorkflowService/GetClusterInfo',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetClusterInfoRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetClusterInfoResponse.FromString,
                )
        self.ListTaskListPartitions = channel.unary_unary(
                '/workflowservice.WorkflowService/ListTaskListPartitions',
                request_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListTaskListPartitionsRequest.SerializeToString,
                response_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListTaskListPartitionsResponse.FromString,
                )


class WorkflowServiceServicer(object):
    """WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
    StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
    to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService.  For each
    DecisionTask, application is expected to process the history of events for that session and respond back with next
    decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
    with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
    """

    def RegisterNamespace(self, request, context):
        """RegisterNamespace creates a new namespace which can be used as a container for all resources.  Namespace is a top level
        entity within Temporal, used as a container for all resources like workflow executions, task lists, etc.  Namespace
        acts as a sandbox and provides isolation for all resources within the namespace.  All resources belongs to exactly one
        namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeNamespace(self, request, context):
        """DescribeNamespace returns the information and configuration for a registered namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNamespaces(self, request, context):
        """ListNamespaces returns the information and configuration for all namespaces.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNamespace(self, request, context):
        """UpdateNamespace is used to update the information and configuration for a registered namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeprecateNamespace(self, request, context):
        """DeprecateNamespace us used to update status of a registered namespace to DEPRECATED.  Once the namespace is deprecated
        it cannot be used to start new workflow executions.  Existing workflow executions will continue to run on
        deprecated namespaces.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartWorkflowExecution(self, request, context):
        """StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
        'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
        first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedFailure', if an instance already
        exists with same workflowId.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowExecutionHistory(self, request, context):
        """GetWorkflowExecutionHistory returns the history of specified workflow execution.  It fails with 'NotFoundFailure' if specified workflow
        execution in unknown to the service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollForDecisionTask(self, request, context):
        """PollForDecisionTask is called by application worker to process DecisionTask from a specific task list.  A
        DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
        Application is then expected to call 'RespondDecisionTaskCompleted' API when it is done processing the DecisionTask.
        It will also create a 'DecisionTaskStarted' event in the history for that session before handing off DecisionTask to
        application worker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondDecisionTaskCompleted(self, request, context):
        """RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
        'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
        potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
        event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
        for completing the DecisionTask.
        The response could contain a new decision task if there is one or if the request asking for one.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondDecisionTaskFailed(self, request, context):
        """RespondDecisionTaskFailed is called by application worker to indicate failure.  This results in
        DecisionTaskFailedEvent written to the history and a new DecisionTask created.  This API can be used by client to
        either clear sticky task list or report any panics during DecisionTask processing.  Temporal will only append first
        DecisionTaskFailed event to the history of workflow execution for consecutive failures.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollForActivityTask(self, request, context):
        """PollForActivityTask is called by application worker to process ActivityTask from a specific task list.  ActivityTask
        is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
        Application is expected to call 'RespondActivityTaskCompleted' or 'RespondActivityTaskFailed' once it is done
        processing the task.
        Application also needs to call 'RecordActivityTaskHeartbeat' API within 'heartbeatTimeoutSeconds' interval to
        prevent the task from getting timed out.  An event 'ActivityTaskStarted' event is also written to workflow execution
        history before the ActivityTask is dispatched to application worker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordActivityTaskHeartbeat(self, request, context):
        """RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
        to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
        'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
        fail with 'NotFoundFailure' in such situations.  Use the 'taskToken' provided as response of
        PollForActivityTask API call for heart beating.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordActivityTaskHeartbeatById(self, request, context):
        """RecordActivityTaskHeartbeatById is called by application worker while it is processing an ActivityTask.  If worker fails
        to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timed out and
        'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeatById' will
        fail with 'NotFoundFailure' in such situations.  Instead of using 'taskToken' like in RecordActivityTaskHeartbeat,
        use Namespace, WorkflowId and ActivityId
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondActivityTaskCompleted(self, request, context):
        """RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
        result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
        created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
        PollForActivityTask API call for completion. It fails with 'NotFoundFailure' if the taskToken is not valid
        anymore due to activity timeout.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondActivityTaskCompletedById(self, request, context):
        """RespondActivityTaskCompletedById is called by application worker when it is done processing an ActivityTask.
        It will result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
        created for the workflow so new decisions could be made.  Similar to RespondActivityTaskCompleted but use Namespace,
        WorkflowId and ActivityId instead of 'taskToken' for completion. It fails with 'NotFoundFailure'
        if the these Ids are not valid anymore due to activity timeout.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondActivityTaskFailed(self, request, context):
        """RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
        result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
        created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
        PollForActivityTask API call for completion. It fails with 'NotFoundFailure' if the taskToken is not valid
        anymore due to activity timeout.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondActivityTaskFailedById(self, request, context):
        """RespondActivityTaskFailedById is called by application worker when it is done processing an ActivityTask.
        It will result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
        created for the workflow instance so new decisions could be made.  Similar to RespondActivityTaskFailed but use
        Namespace, WorkflowId and ActivityId instead of 'taskToken' for completion. It fails with 'NotFoundFailure'
        if the these Ids are not valid anymore due to activity timeout.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondActivityTaskCanceled(self, request, context):
        """RespondActivityTaskCanceled is called by application worker when it is successfully canceled an ActivityTask.  It will
        result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
        created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
        PollForActivityTask API call for completion. It fails with 'NotFoundFailure' if the taskToken is not valid
        anymore due to activity timeout.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondActivityTaskCanceledById(self, request, context):
        """RespondActivityTaskCanceledById is called by application worker when it is successfully canceled an ActivityTask.
        It will result in a new 'ActivityTaskCanceled' event being written to the workflow history and a new DecisionTask
        created for the workflow instance so new decisions could be made.  Similar to RespondActivityTaskCanceled but use
        Namespace, WorkflowId and ActivityId instead of 'taskToken' for completion. It fails with 'NotFoundFailure'
        if the these Ids are not valid anymore due to activity timeout.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCancelWorkflowExecution(self, request, context):
        """RequestCancelWorkflowExecution is called by application worker when it wants to request cancellation of a workflow instance.
        It will result in a new 'WorkflowExecutionCancelRequested' event being written to the workflow history and a new DecisionTask
        created for the workflow instance so new decisions could be made. It fails with 'NotFoundFailure' if the workflow is not valid
        anymore due to completion or doesn't exist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalWorkflowExecution(self, request, context):
        """SignalWorkflowExecution is used to send a signal event to running workflow execution.  This results in
        WorkflowExecutionSignaled event recorded in the history and a decision task being created for the execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalWithStartWorkflowExecution(self, request, context):
        """SignalWithStartWorkflowExecution is used to ensure sending signal to a workflow.
        If the workflow is running, this results in WorkflowExecutionSignaled event being recorded in the history
        and a decision task being created for the execution.
        If the workflow is not running or not found, this results in WorkflowExecutionStarted and WorkflowExecutionSignaled
        events being recorded in history, and a decision task being created for the execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetWorkflowExecution(self, request, context):
        """ResetWorkflowExecution reset an existing workflow execution to DecisionTaskCompleted event(exclusive).
        And it will immediately terminating the current execution instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateWorkflowExecution(self, request, context):
        """TerminateWorkflowExecution terminates an existing workflow execution by recording WorkflowExecutionTerminated event
        in the history and immediately terminating the execution instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOpenWorkflowExecutions(self, request, context):
        """ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClosedWorkflowExecutions(self, request, context):
        """ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkflowExecutions(self, request, context):
        """ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListArchivedWorkflowExecutions(self, request, context):
        """ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanWorkflowExecutions(self, request, context):
        """ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountWorkflowExecutions(self, request, context):
        """CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSearchAttributes(self, request, context):
        """GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondQueryTaskCompleted(self, request, context):
        """RespondQueryTaskCompleted is called by application worker to complete a QueryTask (which is a DecisionTask for query)
        as a result of 'PollForDecisionTask' API call. Completing a QueryTask will unblock the client call to 'QueryWorkflow'
        API and return the query result to client as a response to 'QueryWorkflow' API call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetStickyTaskList(self, request, context):
        """ResetStickyTaskList resets the sticky task list related information in mutable state of a given workflow.
        Things cleared are:
        1. StickyTaskList
        2. StickyScheduleToStartTimeout
        3. ClientLibraryVersion
        4. ClientFeatureVersion
        5. ClientImpl
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryWorkflow(self, request, context):
        """QueryWorkflow returns query result for a specified workflow execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeWorkflowExecution(self, request, context):
        """DescribeWorkflowExecution returns information about the specified workflow execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeTaskList(self, request, context):
        """DescribeTaskList returns information about the target task list, right now this API returns the
        pollers which polled this task list in last few minutes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterInfo(self, request, context):
        """GetClusterInfo returns information about temporal cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTaskListPartitions(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNamespace,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RegisterNamespaceRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RegisterNamespaceResponse.SerializeToString,
            ),
            'DescribeNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeNamespace,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeNamespaceRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeNamespaceResponse.SerializeToString,
            ),
            'ListNamespaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNamespaces,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListNamespacesRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListNamespacesResponse.SerializeToString,
            ),
            'UpdateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNamespace,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.UpdateNamespaceRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.UpdateNamespaceResponse.SerializeToString,
            ),
            'DeprecateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.DeprecateNamespace,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DeprecateNamespaceRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DeprecateNamespaceResponse.SerializeToString,
            ),
            'StartWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.StartWorkflowExecution,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.StartWorkflowExecutionRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.StartWorkflowExecutionResponse.SerializeToString,
            ),
            'GetWorkflowExecutionHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowExecutionHistory,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetWorkflowExecutionHistoryRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetWorkflowExecutionHistoryResponse.SerializeToString,
            ),
            'PollForDecisionTask': grpc.unary_unary_rpc_method_handler(
                    servicer.PollForDecisionTask,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForDecisionTaskRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForDecisionTaskResponse.SerializeToString,
            ),
            'RespondDecisionTaskCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondDecisionTaskCompleted,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskCompletedRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskCompletedResponse.SerializeToString,
            ),
            'RespondDecisionTaskFailed': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondDecisionTaskFailed,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskFailedRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskFailedResponse.SerializeToString,
            ),
            'PollForActivityTask': grpc.unary_unary_rpc_method_handler(
                    servicer.PollForActivityTask,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForActivityTaskRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForActivityTaskResponse.SerializeToString,
            ),
            'RecordActivityTaskHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordActivityTaskHeartbeat,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatResponse.SerializeToString,
            ),
            'RecordActivityTaskHeartbeatById': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordActivityTaskHeartbeatById,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatByIdRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatByIdResponse.SerializeToString,
            ),
            'RespondActivityTaskCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondActivityTaskCompleted,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedResponse.SerializeToString,
            ),
            'RespondActivityTaskCompletedById': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondActivityTaskCompletedById,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedByIdRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedByIdResponse.SerializeToString,
            ),
            'RespondActivityTaskFailed': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondActivityTaskFailed,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedResponse.SerializeToString,
            ),
            'RespondActivityTaskFailedById': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondActivityTaskFailedById,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedByIdRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedByIdResponse.SerializeToString,
            ),
            'RespondActivityTaskCanceled': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondActivityTaskCanceled,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledResponse.SerializeToString,
            ),
            'RespondActivityTaskCanceledById': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondActivityTaskCanceledById,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledByIdRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledByIdResponse.SerializeToString,
            ),
            'RequestCancelWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCancelWorkflowExecution,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RequestCancelWorkflowExecutionRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RequestCancelWorkflowExecutionResponse.SerializeToString,
            ),
            'SignalWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalWorkflowExecution,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWorkflowExecutionRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWorkflowExecutionResponse.SerializeToString,
            ),
            'SignalWithStartWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalWithStartWorkflowExecution,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWithStartWorkflowExecutionRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWithStartWorkflowExecutionResponse.SerializeToString,
            ),
            'ResetWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetWorkflowExecution,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetWorkflowExecutionRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetWorkflowExecutionResponse.SerializeToString,
            ),
            'TerminateWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateWorkflowExecution,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.TerminateWorkflowExecutionRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.TerminateWorkflowExecutionResponse.SerializeToString,
            ),
            'ListOpenWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOpenWorkflowExecutions,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListOpenWorkflowExecutionsRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListOpenWorkflowExecutionsResponse.SerializeToString,
            ),
            'ListClosedWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClosedWorkflowExecutions,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListClosedWorkflowExecutionsRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListClosedWorkflowExecutionsResponse.SerializeToString,
            ),
            'ListWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkflowExecutions,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListWorkflowExecutionsRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListWorkflowExecutionsResponse.SerializeToString,
            ),
            'ListArchivedWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListArchivedWorkflowExecutions,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListArchivedWorkflowExecutionsRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListArchivedWorkflowExecutionsResponse.SerializeToString,
            ),
            'ScanWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanWorkflowExecutions,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ScanWorkflowExecutionsRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ScanWorkflowExecutionsResponse.SerializeToString,
            ),
            'CountWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.CountWorkflowExecutions,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.CountWorkflowExecutionsRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.CountWorkflowExecutionsResponse.SerializeToString,
            ),
            'GetSearchAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSearchAttributes,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetSearchAttributesRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetSearchAttributesResponse.SerializeToString,
            ),
            'RespondQueryTaskCompleted': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondQueryTaskCompleted,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondQueryTaskCompletedRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondQueryTaskCompletedResponse.SerializeToString,
            ),
            'ResetStickyTaskList': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetStickyTaskList,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetStickyTaskListRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetStickyTaskListResponse.SerializeToString,
            ),
            'QueryWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryWorkflow,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.QueryWorkflowRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.QueryWorkflowResponse.SerializeToString,
            ),
            'DescribeWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeWorkflowExecution,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeWorkflowExecutionRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeWorkflowExecutionResponse.SerializeToString,
            ),
            'DescribeTaskList': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeTaskList,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeTaskListRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeTaskListResponse.SerializeToString,
            ),
            'GetClusterInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterInfo,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetClusterInfoRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetClusterInfoResponse.SerializeToString,
            ),
            'ListTaskListPartitions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTaskListPartitions,
                    request_deserializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListTaskListPartitionsRequest.FromString,
                    response_serializer=temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListTaskListPartitionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workflowservice.WorkflowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkflowService(object):
    """WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
    StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
    to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService.  For each
    DecisionTask, application is expected to process the history of events for that session and respond back with next
    decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
    with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
    """

    @staticmethod
    def RegisterNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RegisterNamespace',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RegisterNamespaceRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RegisterNamespaceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/DescribeNamespace',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeNamespaceRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeNamespaceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNamespaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ListNamespaces',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListNamespacesRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListNamespacesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/UpdateNamespace',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.UpdateNamespaceRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.UpdateNamespaceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeprecateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/DeprecateNamespace',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DeprecateNamespaceRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DeprecateNamespaceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/StartWorkflowExecution',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.StartWorkflowExecutionRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.StartWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowExecutionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/GetWorkflowExecutionHistory',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetWorkflowExecutionHistoryRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetWorkflowExecutionHistoryResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollForDecisionTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/PollForDecisionTask',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForDecisionTaskRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForDecisionTaskResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondDecisionTaskCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondDecisionTaskCompleted',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskCompletedRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskCompletedResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondDecisionTaskFailed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondDecisionTaskFailed',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskFailedRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondDecisionTaskFailedResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollForActivityTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/PollForActivityTask',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForActivityTaskRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.PollForActivityTaskResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordActivityTaskHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RecordActivityTaskHeartbeat',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordActivityTaskHeartbeatById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RecordActivityTaskHeartbeatById',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatByIdRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RecordActivityTaskHeartbeatByIdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondActivityTaskCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondActivityTaskCompleted',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondActivityTaskCompletedById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondActivityTaskCompletedById',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedByIdRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCompletedByIdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondActivityTaskFailed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondActivityTaskFailed',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondActivityTaskFailedById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondActivityTaskFailedById',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedByIdRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskFailedByIdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondActivityTaskCanceled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondActivityTaskCanceled',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondActivityTaskCanceledById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondActivityTaskCanceledById',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledByIdRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondActivityTaskCanceledByIdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestCancelWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RequestCancelWorkflowExecution',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RequestCancelWorkflowExecutionRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RequestCancelWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignalWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/SignalWorkflowExecution',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWorkflowExecutionRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignalWithStartWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/SignalWithStartWorkflowExecution',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWithStartWorkflowExecutionRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.SignalWithStartWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ResetWorkflowExecution',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetWorkflowExecutionRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/TerminateWorkflowExecution',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.TerminateWorkflowExecutionRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.TerminateWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOpenWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ListOpenWorkflowExecutions',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListOpenWorkflowExecutionsRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListOpenWorkflowExecutionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListClosedWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ListClosedWorkflowExecutions',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListClosedWorkflowExecutionsRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListClosedWorkflowExecutionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ListWorkflowExecutions',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListWorkflowExecutionsRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListWorkflowExecutionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListArchivedWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ListArchivedWorkflowExecutions',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListArchivedWorkflowExecutionsRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListArchivedWorkflowExecutionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScanWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ScanWorkflowExecutions',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ScanWorkflowExecutionsRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ScanWorkflowExecutionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/CountWorkflowExecutions',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.CountWorkflowExecutionsRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.CountWorkflowExecutionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSearchAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/GetSearchAttributes',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetSearchAttributesRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetSearchAttributesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondQueryTaskCompleted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/RespondQueryTaskCompleted',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondQueryTaskCompletedRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.RespondQueryTaskCompletedResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetStickyTaskList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ResetStickyTaskList',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetStickyTaskListRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ResetStickyTaskListResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/QueryWorkflow',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.QueryWorkflowRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.QueryWorkflowResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/DescribeWorkflowExecution',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeWorkflowExecutionRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeWorkflowExecutionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeTaskList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/DescribeTaskList',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeTaskListRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.DescribeTaskListResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClusterInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/GetClusterInfo',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetClusterInfoRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.GetClusterInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTaskListPartitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workflowservice.WorkflowService/ListTaskListPartitions',
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListTaskListPartitionsRequest.SerializeToString,
            temporal_dot_proto_dot_workflowservice_dot_request__response__pb2.ListTaskListPartitionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
